
# Program entry point
<program> ::= <statement list>

<statement list> ::= { <statement> }

<statement> ::= "if" <boolean> "then" $OpenBrack $Identifier $CloseBrack $NewLine
<statement> ::= "while" <boolean> $OpenBrack $Identifier $CloseBrack $NewLine
<statement> ::= "for" $Identifier "=" $Number "," <boolean-statement> "," <math-statement> $OpenBrack $Identifier $CloseBrack $NewLine

<param list> ::= <param> <param list> | <empty>

<param> ::= <term>

<boolean-statement> ::= <boolean> | <term> <cmp> <term>

<math-statement> ::= $Identifier <binary-math> <math-statement> | "(" <math-statement> ")" | <incrementing> | $Identifier

<incrementing> ::= "++" $Identifier | $Identifier "++" | "--" $Identifier | $Identifier "--"

<cmp> ::= "<" | ">" | "<=" | ">=" | "=="

<binary-math> ::= "+" | "-" | "*" | "/"

<boolean> ::= "true" | "false"

<term> ::= $Identifier | $Number

# <test> ::= { "Hello" "Son" | "Goodbye" "Son" } { "Make" } "Me" "Proud"


# { ... } - any number ( >= 0 )
# ( ... ) - grouping
# [ ... ] - zero or one instance
# $... - Lexeme type
