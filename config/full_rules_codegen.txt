.Lexer
    @lexeme_name: r`@(\@ | _)+`
    @colon: r`:`
    @identifier: r`( \@ | _ )+`
    @integer: r`\d+`
    @regex: r` r \` ( \\ \` | [~ \`] )* \` `
    @literal: r` " ( \\" | [~"] )* " `
    @or: r`\|`
    @pos_arg: r`$ \d+`
    @null: r`$null`
    @comment: r`# [~\n]* \n`
    @path: r`\@+/(\@+/)+\@+.h`
    @classname: r`( \@ | _ )+(::( \@ | _ )+)*`

    @code: r` \{ [~%\}]* %\} `

    @spaces: r`\s+`
    @newlines: r`\n+`
    @continuation: r`\\ \n`

    .Skip spaces
    .Skip comment
    .Skip continuation
.End

.Parser

    .Start start

    start -> lexer_block newlines parser_block newlines optional_data_block @eof : field($0), field($2), field($4, "data_block") \
        %ParserGenerator{
            LOG_SEV(Info) << CLR("Starting to parse the description.");
            object.lexer_block->Accept(*this);
            object.parser_block->Accept(*this);
            object.data_block->Accept(*this);

            // Shift productions, so all terminals and nonterminals have positive numbers.
            shiftProductionNumbers();
            findStartProduction();
        %}

    # Having a data block is optional.
    optional_data_block -> data_block : field($0) %ParserGenerator{
            object.data_block->Accept(*this);
        %} \
        | $null

    # ========================================================
    #  Utility
    # ========================================================

    # NOTE: This is to get around the fact that we can have things like "\n   \n" which we want to count as "newlines."
    #       For some reason, defining this at the lexeme level is not working well.
    newlines -> newlines @newlines -> prec(2) \
        | @newlines -> prec(2)

    # ========================================================
    #  Lexer
    # ========================================================

    lexer_block -> ".Lexer" newlines lexer_definitions newlines ".End" : field($2.definitions) %ParserGenerator{
            LOG_SEV(Info) << "Getting lexer definitions.";
            for (auto& definition : object.definitions) {
              definition->Accept(*this);
            }
        %}

    lexer_definitions -> lexer_definitions newlines lexeme_line : append($0.definitions, "definitions"), push($2, "definitions") %ParserGenerator{
            for (auto& definition : object.definitions) {
              definition->Accept(*this);
            }
        %} \
        | lexeme_line : push($0, "definitions") %ParserGenerator{
            for (auto& definition : object.definitions) {
              definition->Accept(*this);
            }
        %}

    lexeme_line -> lexeme_definition : node("Lexeme"), field($0.name), field($0.regex) \
        %ParserGenerator{
            std::string_view name_view = object.name;
            std::string name{name_view.substr(1, name_view.size() - 1)};  // Remove the @
            // Get the r` and ` off the regex.
            auto regex = processRegex(object.regex);
            LOG_SEV(Debug) << "Adding lexeme: " << CLBG(name) << " with regex " << CLBB(regex) << ".";
            production_rules_data_->lexer_generator->AddLexeme(name, regex);
        %} \
        | skip_indicator : node("Skip"), field($0.identifier) %ParserGenerator{
            LOG_SEV(Debug) << "Setting lexeme " << object.identifier << " to be a skip lexeme.";
            production_rules_data_->lexer_generator->AddSkip(object.identifier);
        %}

    # The parts from this node are taken directly into lexeme_line:Lexeme.
    lexeme_definition -> @lexeme_name @colon @regex : field($0, "name"), field($2, "regex")

    # The parts from this node are taken directly into lexeme_line:Skip.
    skip_indicator -> ".Skip" @identifier : field($1, "identifier")

    # ========================================================
    #  Parser
    # ========================================================

    parser_block -> ".Parser" newlines start_indicator newlines parser_definitions newlines ".End" \
    : node("Parser"), field($2.start_name, "start_name"), field($4.definitions, "definition") %ParserGenerator{
            // Set the start production name.
            auto id = registerNonterminal(object.start_name);
            registerStartingProduction(id);
            LOG_SEV(Info) << "Setting production start name to "
                          << CLM(production_rules_data_->start_nonterminal_name) << ".";
            for (auto& definition : object.definition) {
              definition->Accept(*this);
            }
        %}

    start_indicator -> ".Start" @identifier : field($1, "start_name") %ParserGenerator{
            // Set the start non-terminal
            production_rules_data_->start_nonterminal_name = object.start_name;
        %}

    parser_definitions -> parser_definitions newlines parser_definition \
        : append($0.definitions, "definitions"), push($2, "definitions") %ParserGenerator{
            for (auto& definition : object.definitions) {
              definition->Accept(*this);
            }
        %} \
        | parser_definition : push($0, "definitions") %ParserGenerator{
            for (auto& definition : object.definitions) {
              definition->Accept(*this);
            }
        %}

    parser_definition -> @identifier "->" production_lines \
        : node("parser"), field($0, "nonterminal_name"), field($2.productions) %ParserGenerator{
            LOG_SEV(Info) << "Reading definition for non-terminal " << CLY(object.nonterminal_name)
                              << ", there are " << object.productions.size() << " productions.";

            registerNonterminalDefinition(object.nonterminal_name);
            LOG_SEV(Debug) << "Registered nonterminal " << CLY(object.nonterminal_name) << " with id " << getCurrentProductionID();
            for (auto& production : object.productions) {
              production->Accept(*this);
            }
        %}

    production_lines -> production_and_data \
        : node("options"), push($0, "productions") \
        %ParserGenerator{
            for (auto& production : object.productions) {
              production->Accept(*this);
            }
        %} \
        | production_lines or production_and_data : \
        node("options"), append($0.productions, "productions"), push($2, "productions") \
        %ParserGenerator{
            for (auto& production : object.productions) {
              production->Accept(*this);
            }
        %}

    or -> @or

    production_and_data -> production_atoms resolution \
        : field($0.atoms), field($1, "resolution") %ParserGenerator{
            makeNextProductionRule();  // Create the item for this production.
            // Production and data with no actions.
            LOG_SEV(Debug) << "Production with no actions.";
            for (auto& atom : object.atoms) {
              atom->Accept(*this);
            }
            storeCurrent(); // Done creating the item, store it.
        %} \
        | production_atoms resolution @colon actions code_block \
        : field($0.atoms), field($1, "resolution"), field($3.actions, "actions"), field($4, "code") \
        %ParserGenerator{
            makeNextProductionRule();  // Create the item for this production.

            LOG_SEV(Info) << "There are " << object.atoms.size() << " atoms and " << object.actions.size() << " actions.";
            for (auto& atom : object.atoms) {
              atom->Accept(*this);
            }
            for (auto& action : object.actions) {
              action->Accept(*this);
            }
            object.code->Accept(*this);

            storeCurrent(); // Done creating the item, store it.
        %}

    # Since production_and_data takes the atoms from production atoms, these functions will never be used.
    production_atoms -> production_atoms production_atom  \
        : node("production_atoms"), append($0.atoms, "atoms"), push($1, "atoms") %ParserGenerator{
            for (auto& atom : object.atoms) {
              atom->Accept(*this);
            }
         %} \
        | production_atom : node("production_atoms"), push($0, "atoms") %ParserGenerator{
           for (auto& atom : object.atoms) {
             atom->Accept(*this);
           }
        %}

    production_atom -> @identifier : node("identifier") %ParserGenerator{
            // Indicates a non-terminal.
            auto id = registerNonterminal(object.identifier);
            LOG_SEV(Info) << "Non-terminal: '" << object.identifier << "', id = " << id << ".";
            addToCurrentProduction(id);
        %} \
        | @literal : node("literal") %ParserGenerator{
            // Get rid of quotes
            auto literal = object.literal.substr(1, object.literal.size() - 2);
            int id = production_rules_data_->lexer_generator->AddReserved(literal);
            LOG_SEV(Info) << "Literal: " << CLBG(literal) << "', id = " << id << ".";
            addToCurrentProduction(id);
        %} \
        | @lexeme_name : node("lexeme_name"), field($0, "lexeme_name") %ParserGenerator{
            // Need to get rid of the '@' at the beginning.
            auto name = object.lexeme_name.substr(1);
            int id = getLexemeID(name);
            LOG_SEV(Info) << "Lexeme name: '" << name << "', id = " << id << ".";
            addToCurrentProduction(id);
        %}\
        | @null : node("null")  %ParserGenerator{
            // Found a null
            LOG_SEV(Debug) << "Null found.";
        %}

    resolution -> $null \
        | "->" resolution_atoms : field($1.atoms) %ParserGenerator{
            for (auto& atom : object.atoms) {
              atom->Accept(*this);
            }
        %}

    resolution_atoms -> resolution_atoms "," resolution_atom \
        : node("resolution_atoms"), append($0.atoms, "atoms"), push($2, "atoms") \
        | resolution_atom : node("resolution_atoms"), push($0, "atoms")

    resolution_atom -> "assoc" "(" @identifier ")" : node("assoc"), field($2, "assoc") %ParserGenerator{
            LOG_SEV(Debug) << "Assoc: " << object.assoc;
            getCurrentProduction().res_info.assoc = toAssociation(object.assoc);
        %} \
        | "prec" "(" @integer ")" : node("prec"), field($2, "prec") %ParserGenerator{
            LOG_SEV(Debug) << "Prec: " << object.prec;
            getCurrentProduction().res_info.precedence = manta::stoi(object.prec);
        %}

    actions -> actions "," action \
        : node("actions"), append($0.actions, "actions"), push($2, "actions") %ParserGenerator{
            for (auto& action : object.actions) {
              action->Accept(*this);
            }
        %} \
        | action : node("actions"), push($0, "actions") %ParserGenerator{
            for (auto& action : object.actions) {
              action->Accept(*this);
            }
        %}

    action -> @identifier "(" args ")" \
        : node("action"), field($0, "fn_name"), field($2.arguments, "arguments") %ParserGenerator{
            registerAction(object.fn_name);
            for (auto& arg : object.arguments) {
              arg->Accept(*this);
            }
        %}

    args -> args "," arg \
        : node("arguments"), append($0.arguments, "arguments"), push($2, "arguments") \
        | arg : node("arguments"), push($0, "arguments")

    arg -> @pos_arg : node("PosArg"), field($0, "pos") \
        %ParserGenerator{
            LOG_SEV(Debug) << "Pos arg: ARG:" << object.pos;
            addArgumentToAction(object.pos.substr(1));
        %} \
        | @pos_arg "." @identifier : node("PosArg"), field($0, "pos"), field($2, "field_name") %ParserGenerator{
            LOG_SEV(Debug) << "Pos arg: " << object.pos << " with field name: " << object.field_name << " ARG:"
                           << object.pos << object.field_name;
            addArgumentToAction(object.pos.substr(1) + "." + object.field_name);
        %} \
        | @literal : node("StringArg"), field($0, "argument") %ParserGenerator{
            // Remove the quotes.
            auto arg = object.argument.substr(1, object.argument.size() - 2);
            LOG_SEV(Debug) << "String arg: " << CLBG(arg) << " ARG:" << object.argument;
            addArgumentToAction(arg);
        %} \
        | "$null" : node("NullArg")

    code_block -> $null \
        | "%" @identifier @code  : node("code_block"), field($1, "visitor_name"), field($2, "code_body") %ParserGenerator{
            LOG_SEV(Info) << "Code block: " << CLBB(object.code_body);

            // Have to take off the beginning "{" and ending "% }".
            auto code = object.code_body.substr(1, object.code_body.size() - 3);

            auto item = getCurrentItemNumber();
            if (!item) {
              MANTA_THROW(UnexpectedInput, "could not get item number for reduction code");
            }
            if (object.visitor_name.empty() || object.visitor_name == "REDUCE") {
              production_rules_data_->reduction_code[*item] = code;
            }
            else {
              production_rules_data_->visitor_data.SetBodyForItem(
                object.visitor_name,
                *item,
                code);
            }
        %}

    # ========================================================
    #  Data section
    # ========================================================

    data_block -> ".Data" newlines data_definitions newlines ".End" : field($2.definitions, "definitions") %ParserGenerator{
            LOG_SEV(Info) << "Getting definitions.";
            for (auto& definition : object.definitions) {
              definition->Accept(*this);
            }
        %}

    data_definitions -> data_definitions newlines data_definition : append($0.definitions, "definitions"), push($2, "definitions") %ParserGenerator{
           LOG_SEV(Info) << "Processing definitions.";
           for (auto& definition : object.definitions) {
             definition->Accept(*this);
           }
       %} \
        | data_definition : push($0, "definitions")

    data_definition -> import_statement : node("import"), field($0.path) \
            %ParserGenerator{
                LOG_SEV(Info) << "Import " << object.path << ".";
                addImport(object.path);
            %} \
        | inherit_statement : node("inherit"), field($0.visitor_name, "visitor_name"), field($0.base, "base") \
            %ParserGenerator{
                LOG_SEV(Info) << "Inherits " << object.visitor_name << " from " << object.base << ".";
                addParentClassForVisitor(object.visitor_name, object.base);
            %} \
        | general_code_block : node("define_code_block"), field($0.class_name), field($0.code) \
            %ParserGenerator{
                LOG_SEV(Info) << "General code block:\n" << object.code;
                // Take off leading "{" and trailing "% }".
                auto code = object.code.substr(1, object.code.size() - 3);
                addGeneralCodeToVisitor(object.class_name, code);
            %}

    import_statement -> "@import" @path : field($1, "path")

    inherit_statement -> "inherits" @identifier @classname : field($1, "visitor_name"), field($2, "base")

    general_code_block -> "code" @identifier "%" @code : field($1, "class_name"), field($3, "code")

.End

.Data
    @import manta/generator/DescriptionParser.h
    @import manta/utility/Formatting.h

    code ParserGenerator %{
        ParserGenerator() = default;

        std::shared_ptr<manta::ProductionRulesData> ParseDescription(std::istream& stream) override { return nullptr; }

        void storeCurrent() {
          LOG_SEV(Info) << "Storing item of size " << getCurrentProduction().rule.Size() << ".";
          storeCurrentItem();
        }

        void registerAction(const std::string& action) {
          LOG_SEV(Debug) << "Registering action '" << action << "' for production " << getCurrentProductionID() << ".";
          createAction(action);
        }

        std::string processRegex(const std::string& regex_in) {
          // Get the r` and ` off the regex.
          // Any \` should be replaced with just `
          std::string buffer;
          buffer.reserve(regex_in.size() - 3);
          auto size = regex_in.size() - 1;
          for (auto i = 2; i < size; ++i) {
            if (regex_in[i] == '\\' && i + 1 < size && regex_in[i + 1] == '`') {
              buffer.push_back('`');
              ++i;
            } else {
              buffer.push_back(regex_in[i]);
            }
          }
          return buffer;
        }

        manta::Associativity toAssociation(const std::string& str) {
          using namespace manta;
          if (str == "Left") return Associativity::LEFT;
          if (str == "Right") return Associativity::RIGHT;
          if (str == "None") return Associativity::NONE;
          MANTA_FAIL("unknown associativity: " << str);
        }
    %}

    inherits ParserGenerator manta::DescriptionParser
    inherits ParserGenerator manta::ProductionRulesBuilder
.End