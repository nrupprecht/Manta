.Lexer
    @special_symbol:  .\@+
    @lexeme_name: @(\@ | _)+
    @semicolon: :
    @identifier: ( \@ | _ )+
    @regex: " (\@ | \d | \| | \\ | \s | @ | + | * | _ | \( | \) | . | : | $ | < | > | - | , )* "
    @literal: " (\@ | \d | \| | \\ | \s | @ | + | * | _ | \( | \) | . | : | $ | < | > | - | , )* "
    @or: \|
    @lparen: \[
    @rparen: \]
    @pos_arg: $ \d*

    # Define a comment - really, should skip anything other than a newline.
    @comment: # (\@ | \s | \d)*

    @spaces: \s+
    @newlines: \n+
    @eof: \0

    .Skip spaces
    .Skip comment
.End

.Parser

    .Start start

    start -> lexer_block @newlines parser_block @eof                          : add($0), add($2)

    # ========================================================
    #  Lexer
    # ========================================================

    lexer_block -> ".Lexer" @newlines lexer_definitions @newlines ".End"    : adopt($2)

    lexer_definitions -> lexer_definitions @newlines lexeme_definition      : adopt($0), add($2)
        | lexeme_definition                                                 : add($0)

    lexeme_definition -> @lexeme_name @semicolon @regex                     : add($0), add($2)

    # ========================================================
    #  Parser
    # ========================================================

    parser_block -> ".Parser" @newlines start_indicator @newlines parser_definitions @newlines ".End"     : add($2), add($4)

    start_indicator -> ".Start" @identifier                                                         : node("start"), add($1)

    parser_definitions -> parser_definitions @newlines parser_definition                            : adopt($0), add($2)
        | parser_definition                                                                         # : replace($0)

    parser_definition -> @identifier "->" production_lines                                          : push("production_name", $0), add($2)

    production_lines -> production_and_data                                                         : replace($0)
        | production_lines @or production_and_data                                                  : node("options"), adopt($0), add($2)
        # | production_lines @newlines @or production_and_data

    production_and_data -> production_atoms
        | production_atoms @semicolon actions                                                       : add($0), add($2)

    production_atoms -> production_atoms production_atom                                            : adopt($0), add($1)
        | production_atom                                                                           : adopt($0)

    production_atom -> "(" production_atoms ")"     : node("grouping"), adopt($1)
        | "{" production_atoms "}"                  : node("repetition"), adopt($1)
        | "[" production_atoms "]"                  : node("optional"), adopt($1)
        | @identifier                               #: replace($0)
        | @literal                                    #: replace($0)
        | @lexeme_name                              #: replace($0)

    actions -> actions "," action                   : add($0), add($2)
        | action                                    : replace($0)

    action -> @identifier "(" @pos_arg ")"          : add($0), add($2)
        | @identifier "(" @literal ")"              : add($0), add($2)

.End
