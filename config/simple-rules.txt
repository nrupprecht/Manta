.Functions
.End

# Definition of the lexer.
.Lexer

    @operator: [ \+ | - | * | / | ! | \+\+ | \-\- | \( | \) | -> | : | . | , | = | == ]
    @eof: \0
    @identifier: \@ [\@|\d]*
    @int: \d+
    @float: \d+.\d*f
    @double: \d+.\d*
    @whitespaces: \s+
    @quotes: "
    @singlequotes: '
    @newlines: \n+
    @comment: #(~\n)*

.End

# Definition of the Parser
.Parser

    # Entry point is named start.
    start = exprs newlines : add($0)

    newlines = newlines @newline
      | @newline
      | @eof # So the last line doesn't need to end with a newline.

    exprs = exprs newlines expr : adopt($0) add($2)
      | expr                    : replace($0)

    expr = "(" expr ")"     : replace($1)
      | sum                 : replace($0)

    sum = expr "+" mult  : add($0) add($2)
      | mult             : replace($0)

    mult = mult "*" term : add($0) add($2)
      | term             : replace($0)

    term = @identifier   : replace($0)
      | @number          : replace($0)


.End
