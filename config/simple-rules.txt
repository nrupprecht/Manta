# Definition of the lexer_generator.
.Lexer

    @int: r`\d+`
    @whitespaces: r`\s+`
    @newlines: r`\n+`

.End

# Definition of the Parser
.Parser

    # Entry point is named start.
    start -> exprs newlines : field($0, "expressions")

    newlines -> @newlines
        | @eof # So the last line doesn't need to end with a newline.

    exprs -> exprs newlines expr : append($0.expressions, "expressions") push($2, "expressions")
        | expr : push($0, "expressions")

    expr -> "(" expr ")"     : node("expr") field($1)
        | expr "+" expr     -> prec(1) assoc(Left) : node("sum") field($0, "first") field($2, "second")
        | expr "-" expr     -> prec(1) assoc(Left) : node("sub") field($0, "first") field($2, "second")
        | expr "*" expr     -> prec(2) assoc(Left) : node("mult") field($0, "first") field($2, "second")
        | expr "/" expr     -> prec(2) assoc(Left) : node("div") field($0, "first") field($2, "second")
        | expr "^" expr     -> prec(3) assoc(Right) : node("exp") field($0, "first") field($2, "second")
        | @int

.End
