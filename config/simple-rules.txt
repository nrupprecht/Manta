.Functions
.End

# Definition of the lexer.
.Lexer

    @eof: \0
    @int: \d+
    @whitespaces: \s+
    @newlines: \n+

.End

# Definition of the Parser
.Parser

    # Entry point is named start.
    start -> exprs newlines : add($0)

    newlines -> @newlines
        | @eof # So the last line doesn't need to end with a newline.

    exprs -> exprs newlines expr : adopt($0) add($2)
        | expr                   : replace($0)

    expr -> "(" expr ")"     : replace($1)
        | expr "+" expr     -> prec(1) assoc(Left) : node("sum") add($0) add($2)
        | expr "-" expr     -> prec(1) assoc(Left) : node("sub") add($0) add($2)
        | expr "*" expr     -> prec(2) assoc(Left) : node("mult") add($0) add($2)
        | expr "/" expr     -> prec(2) assoc(Left) : node("div") add($0) add($2)
        | expr "^" expr     -> prec(3) assoc(Right) : node("exp") add($0) add($2)
        | @int              : replace($0)

.End
